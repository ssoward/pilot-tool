import React, { useState, useMemo } from 'react'; // Added useMemo
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { initiativeService } from '../services/api';
import type { Initiative, InitiativeStatus, InitiativePriority } from '../types/Initiative'; // Added InitiativeStatus, InitiativePriority
import InitiativeForm from '../components/forms/InitiativeForm';
import type { InitiativeFormData } from '../components/forms/InitiativeForm';
import { PlusIcon, PencilIcon, TrashIcon, EyeIcon, MagnifyingGlassIcon } from '@heroicons/react/24/outline'; // Added MagnifyingGlassIcon
import { Link } from 'react-router-dom';

const InitiativeManagementPage: React.FC = () => {
  const queryClient = useQueryClient();
  const [showForm, setShowForm] = useState(false);
  const [selectedInitiative, setSelectedInitiative] = useState<Initiative | null>(null);
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [statusFilter, setStatusFilter] = useState<InitiativeStatus | '' >('');
  const [priorityFilter, setPriorityFilter] = useState<InitiativePriority | '' >('');
  const [teamFilter, setTeamFilter] = useState<string>('');

  const { data: initiatives = [], isLoading, error } = useQuery<Initiative[]>({
    queryKey: ['initiatives'],
    queryFn: initiativeService.getAllInitiatives,
  });

  const filteredInitiatives = useMemo(() => {
    return initiatives.filter(initiative => {
      const lowerSearchQuery = searchQuery.toLowerCase();
      const matchesSearch = searchQuery === '' ||
        (initiative.summary && initiative.summary.toLowerCase().includes(lowerSearchQuery)) ||
        (initiative.productGroupName && initiative.productGroupName.toLowerCase().includes(lowerSearchQuery)) ||
        (initiative.jiraKey && initiative.jiraKey.toLowerCase().includes(lowerSearchQuery));

      const matchesStatus = statusFilter === '' || initiative.status === statusFilter;
      const matchesPriority = priorityFilter === '' || (initiative.priority && initiative.priority === priorityFilter); // Guard priority
      const matchesTeam = teamFilter === '' || (initiative.teamName && initiative.teamName === teamFilter); // Guard teamName

      return matchesSearch && matchesStatus && matchesPriority && matchesTeam;
    });
  }, [initiatives, searchQuery, statusFilter, priorityFilter, teamFilter]);

  const uniqueStatuses = useMemo(() => {
    return [...new Set(initiatives.map(init => init.status))].filter(Boolean) as InitiativeStatus[];
  }, [initiatives]);

  const uniquePriorities = useMemo(() => {
    return [...new Set(initiatives.map(init => init.priority).filter(Boolean))] as InitiativePriority[]; // Filter out null/undefined before Set
  }, [initiatives]);

  const uniqueTeams = useMemo(() => {
    return [...new Set(initiatives.map(init => init.teamName).filter(Boolean))]; // Filter out null/undefined before Set
  }, [initiatives]);

  const createInitiativeMutation = useMutation({
    mutationFn: initiativeService.createInitiative,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['initiatives'] });
      setShowForm(false);
      setSelectedInitiative(null);
    },
  });

  const updateInitiativeMutation = useMutation({
    mutationFn: (initiative: Initiative) => initiativeService.updateInitiative(initiative.id, initiative),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['initiatives'] });
      setShowForm(false);
      setSelectedInitiative(null);
    },
  });

  const deleteInitiativeMutation = useMutation({
    mutationFn: initiativeService.deleteInitiative,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['initiatives'] });
    },
  });

  const handleFormSubmit = (formData: InitiativeFormData) => {
    if (selectedInitiative && formData.id) {
      // Update existing initiative
      const initiativeData: Initiative = {
        ...formData,
        id: formData.id,
      };
      updateInitiativeMutation.mutate(initiativeData);
    } else {
      // Create new initiative (id will be generated by backend)
      const { id, ...createData } = formData;
      createInitiativeMutation.mutate(createData as Omit<Initiative, 'id'>);
    }
  };

  const handleEdit = (initiative: Initiative) => {
    setSelectedInitiative(initiative);
    setShowForm(true);
  };

  const handleDelete = (id: string) => {
    if (window.confirm('Are you sure you want to delete this initiative?')) {
      deleteInitiativeMutation.mutate(id);
    }
  };

  const openCreateForm = () => {
    setSelectedInitiative(null);
    setShowForm(true);
  };

  if (isLoading) return <div className="p-4">Loading initiatives...</div>;
  if (error) return <div className="p-4 text-red-500">Error loading initiatives: {error.message}</div>;

  return (
    <div className="p-6 bg-gray-100 min-h-screen">
      <header className="mb-6">
        <h1 className="text-3xl font-bold text-gray-800">Initiative Management</h1>
        <p className="text-gray-600">Create, view, and manage all engineering initiatives.</p>
      </header>

      {/* Search and Filter Section */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          {/* Search Input */}
          <div className="md:col-span-1">
            <div className="relative">
              <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <input
                type="text"
                placeholder="Search summary, product group, Jira key..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
          </div>

          {/* Status Filter */}
          <div>
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value as InitiativeStatus | '')}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="">All Statuses</option>
              {uniqueStatuses.map(status => (
                <option key={status} value={status}>{status}</option>
              ))}
            </select>
          </div>

          {/* Priority Filter */}
          <div>
            <select
              value={priorityFilter}
              onChange={(e) => setPriorityFilter(e.target.value as InitiativePriority | '')}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="">All Priorities</option>
              {uniquePriorities.map(priority => (
                <option key={priority} value={priority}>{priority}</option>
              ))}
            </select>
          </div>

          {/* Team Filter */}
          <div>
            <select
              value={teamFilter}
              onChange={(e) => setTeamFilter(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="">All Teams</option>
              {uniqueTeams.map(team => (
                <option key={team} value={team}>{team}</option>
              ))}
            </select>
          </div>
        </div>
         {/* Results Count */}
        <div className="mt-4 text-sm text-gray-600">
          Showing {filteredInitiatives.length} of {initiatives.length} initiatives
        </div>
      </div>

      <div className="mb-6 flex justify-end">
        <button
          onClick={openCreateForm}
          className="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 px-4 rounded-md shadow-sm flex items-center transition duration-150 ease-in-out"
        >
          <PlusIcon className="h-5 w-5 mr-2" />
          Create New Initiative
        </button>
      </div>

      {showForm && (
        <div className="fixed inset-0 z-50 overflow-y-auto bg-gray-800 bg-opacity-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-3xl max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">
                {selectedInitiative ? 'Edit Initiative' : 'Create New Initiative'}
              </h2>
              <InitiativeForm
                initiative={selectedInitiative || undefined}
                onSubmit={handleFormSubmit}
                onClose={() => {
                  setShowForm(false);
                  setSelectedInitiative(null);
                }}
                isLoading={createInitiativeMutation.isPending || updateInitiativeMutation.isPending}
                isEdit={!!selectedInitiative}
              />
            </div>
          </div>
        </div>
      )}

      <div className="bg-white shadow-md rounded-lg overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Summary</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product Group</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Team</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredInitiatives.filter(initiative => initiative.id).map((initiative) => (
              <tr key={initiative.id} className="hover:bg-gray-50 transition-colors">
                <td className="px-6 py-4 whitespace-nowrap">
                  <Link to={`/initiatives/${initiative.id}`} className="text-sm font-medium text-indigo-600 hover:text-indigo-900">
                    {initiative.summary}
                  </Link>
                  {initiative.jiraKey && <span className="block text-xs text-gray-500">{initiative.jiraKey}</span>}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{initiative.productGroupName}</td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                    initiative.status === 'Active' ? 'bg-green-100 text-green-800' :
                    initiative.status === 'Proposal' ? 'bg-yellow-100 text-yellow-800' :
                    initiative.status === 'Draft' ? 'bg-gray-100 text-gray-800' :
                    'bg-blue-100 text-blue-800' // Default for other statuses
                  }`}>
                    {initiative.status}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{initiative.priority}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{initiative.teamName}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <button onClick={() => handleEdit(initiative)} className="text-indigo-600 hover:text-indigo-900 mr-3" title="Edit">
                    <PencilIcon className="h-5 w-5" />
                  </button>
                  <button onClick={() => handleDelete(initiative.id)} className="text-red-600 hover:text-red-900" title="Delete">
                    <TrashIcon className="h-5 w-5" />
                  </button>
                   <Link to={`/initiatives/${initiative.id}`} className="text-gray-600 hover:text-gray-900 ml-3" title="View Details">
                    <EyeIcon className="h-5 w-5" />
                  </Link>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        {filteredInitiatives.length === 0 && (
          <div className="p-6 text-center text-gray-500">
            {searchQuery || statusFilter || priorityFilter || teamFilter ? 'No initiatives match your current filters.' : 'No initiatives found. Get started by creating a new one!'}
          </div>
        )}
      </div>
    </div>
  );
};

export default InitiativeManagementPage;
